/** Declaration file generated by dts-gen */

declare module 'icecast-metadata-stats' {
  export default class IcecastMetadataStats {
    static xml2Json(xml: any): any;
    /**
     * @constructor
     * @param {URL} endpoint Stream endpoint
     * @param {object} [options] Options object
     *
     * @callback [options.onStats] Called when the automatic query completes
     * @callback [options.onStatsFetch] Called when the automatic query begins
     * @param {Array} [options.sources] List of sources to automatically query ["icy", "ogg", "icestats", "stats", "sevenhtml", "nextsongs"]
     * @param {number} [options.interval] Time in seconds to wait between automatically queries
     * @param {URL} [options.icestatsEndpoint] Endpoint for the `status-json.xsl` source
     * @param {URL} [options.statsEndpoint] Endpoint for the `stats` source
     * @param {URL} [options.nextsongsEndpoint] Endpoint for the `nextsongs` source
     * @param {URL} [options.sevenhtmlEndpoint] Endpoint for the `7.html` source
     * @param {number} [options.icyMetaInt] Manually sets the ICY metadata interval
     * @param {string} [options.icyCharacterEncoding] Character encoding to use for ICY metadata (defaults to "utf-8")
     * @param {number} [options.icyDetectionTimeout] Time in milliseconds to search for ICY metadata
     */
    constructor(endpoint: string, options?: object);
    /**
     * @returns The current state ["stopped", "running", "fetching"]
     */
    get state(): any;
    /**
     * @returns The generated `status-json.xsl` endpoint
     */
    get icestatsEndpoint(): any;
    /**
     * @returns The generated `stats` endpoint
     */
    get statsEndpoint(): any;
    /**
     * @returns The generated `nextsongs` endpoint
     */
    get nextsongsEndpoint(): any;
    /**
     * @returns The generated `7.html` endpoint
     */
    get sevenhtmlEndpoint(): any;
    /**
     * @description Starts automatically fetching stats
     */
    start(): void;
    /**
     * @description Stops automatically fetching stats and cancels any inprogress stats
     */
    stop(): void;
    /**
     * @description Manually fetches stats from the sources passed in to the `options.sources` parameter
     * @async
     * @returns {object} Object containing the stats from the sources
     */
    fetch(): object;
    /**
     * @description Fetches the data from the `/status-json.xsl` endpoint
     * @async
     * @returns {object} Object containing results of `/status-json.xsl`
     */
    getIcestats(): object;
    /**
     * @description Fetches the data from the `/7.html` endpoint
     * @async
     * @returns {object} Object containing results of `/7.html`
     */
    getSevenhtml(): object;
    /**
     * @description Fetches the data from the `/stats` endpoint
     * @async
     * @returns {object} Object containing results of `/stats`
     */
    getStats(): object;
    /**
     * @description Fetches the data from the `/nextsongs` endpoint
     * @async
     * @returns {object} Object containing results of `/nextsongs`
     */
    getNextsongs(): object;
    /**
     * @description Fetches the first ICY metadata update from the stream
     * @async
     * @returns {object} Object containing ICY metadata
     */
    getIcyMetadata(): object;
    /**
     * @description Fetches the first Ogg metadata update from the stream
     * @async
     * @returns {object} Object containing Ogg metadata
     */
    getOggMetadata(): object;
    [getStreamMetadata]({
      status,
      endpoint,
      controller,
      headers,
      metadataType,
    }: {
      status: any;
      endpoint: any;
      controller: any;
      headers: any;
      metadataType: any;
    }): Promise<{
      [metadataType]: void | Response;
    }>;
    [fetchStats]({
      status,
      endpoint,
      controller,
      mapper,
      headers,
    }: {
      status: any;
      endpoint: any;
      controller: any;
      mapper: any;
      headers?: {};
    }): Promise<void | Response>;
  }
  declare const getStreamMetadata: unique symbol;
  declare const fetchStats: unique symbol;
  export {};
}
